#include <stdio.h>
#include <string.h>
#include <ctype.h>
#define SIZE 5
void generateKeyTable(char key[], char keyTable[SIZE][SIZE]);
void prepareText(char text[], char preparedText[]);
void encryptText(char preparedText[], char keyTable[SIZE][SIZE], char cipherText[]);
void findPosition(char keyTable[SIZE][SIZE], char ch, int *row, int *col);
void removeDuplicates(char str[]);
int main() {
    char key[100], plainText[100], preparedText[100], cipherText[100];
    char keyTable[SIZE][SIZE];
    printf("Enter the key: ");
    fgets(key, 100, stdin);
    key[strlen(key) - 1] = '\0'; 
    printf("Enter the plaintext: ");
    fgets(plainText, 100, stdin);
    plainText[strlen(plainText) - 1] = '\0'; 
    generateKeyTable(key, keyTable);
    prepareText(plainText, preparedText);
    encryptText(preparedText, keyTable, cipherText);
    printf("Encrypted Text: %s\n", cipherText);
    return 0;
}
void generateKeyTable(char key[], char keyTable[SIZE][SIZE]) {
    int used[26] = {0};
    int i, j, k = 0;
    for (i = 0; i < strlen(key); i++) {
        if (key[i] == 'j') key[i] = 'i'; 
        key[i] = toupper(key[i]);
    }
    removeDuplicates(key);
    for (i = 0; i < strlen(key); i++) {
        if (!used[key[i] - 'A']) {
            keyTable[k / SIZE][k % SIZE] = key[i];
            used[key[i] - 'A'] = 1;
            k++;
        }
    }
    for (i = 0; i < 26; i++) {
        if (i + 'A' != 'J' && !used[i]) {
            keyTable[k / SIZE][k % SIZE] = i + 'A';
            k++;
        }
    }
    printf("Key Table:\n");
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            printf("%c ", keyTable[i][j]);
        }
        printf("\n");
    }
}
void prepareText(char text[], char preparedText[]) {
    int i, j = 0;
    char prev = '\0';
    for (i = 0; i < strlen(text); i++) {
        if (text[i] == ' ') continue; 
        if (text[i] == 'j') text[i] = 'i'; 
        if (prev != '\0' && prev == toupper(text[i])) {
            preparedText[j++] = toupper(text[i]);
            preparedText[j++] = 'X'; 
        }
        preparedText[j++] = toupper(text[i]);
        prev = toupper(text[i]);
    }
    if (j % 2 != 0) preparedText[j++] = 'X'; 
    preparedText[j] = '\0';
}
void encryptText(char preparedText[], char keyTable[SIZE][SIZE], char cipherText[]) {
    int i, row1, col1, row2, col2;
    for (i = 0; i < strlen(preparedText); i += 2) {
        findPosition(keyTable, preparedText[i], &row1, &col1);
        findPosition(keyTable, preparedText[i + 1], &row2, &col2);
        if (row1 == row2) {
            cipherText[i] = keyTable[row1][(col1 + 1) % SIZE];
            cipherText[i + 1] = keyTable[row2][(col2 + 1) % SIZE];
        }
        else if (col1 == col2) {
            cipherText[i] = keyTable[(row1 + 1) % SIZE][col1];
            cipherText[i + 1] = keyTable[(row2 + 1) % SIZE][col2];
        }
        else {
            cipherText[i] = keyTable[row1][col2];
            cipherText[i + 1] = keyTable[row2][col1];
        }
    }
    cipherText[i] = '\0';
}
void findPosition(char keyTable[SIZE][SIZE], char ch, int *row, int *col) {
    int i, j;
    for (i = 0; i < SIZE; i++) {
        for (j = 0; j < SIZE; j++) {
            if (keyTable[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}
void removeDuplicates(char str[]) {
    int i, j, k;
    int len = strlen(str);
    for (i = 0; i < len; i++) {
        for (j = i + 1; j < len;) {
            if (str[i] == str[j]) {
                for (k = j; k < len; k++) {
                    str[k] = str[k + 1];
                }
                len--;
            } else {
                j++;
            }
        }
    }
}
